name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job para linting e formataÃ§Ã£o
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run ESLint
      working-directory: ./backend
      run: npm run lint
      
    - name: Check Prettier formatting
      working-directory: ./backend
      run: npm run format -- --check

  # Job para testes unitÃ¡rios do backend
  test-backend:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: cyberlens_test
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Generate Prisma Client
      working-directory: ./backend
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cyberlens_test
        
    - name: Run database migrations
      working-directory: ./backend
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cyberlens_test
        
    - name: Run unit tests
      working-directory: ./backend
      run: npm run test:ci
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cyberlens_test
        JWT_SECRET: test-jwt-secret-for-ci
        JWT_EXPIRES_IN: 1h
        JWT_REFRESH_SECRET: test-refresh-secret-for-ci
        JWT_REFRESH_EXPIRES_IN: 7d
        BCRYPT_ROUNDS: 10
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/coverage/
          backend/coverage/junit.xml
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Job para build do backend
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [lint, test-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Generate Prisma Client
      working-directory: ./backend
      run: npx prisma generate
      
    - name: Build application
      working-directory: ./backend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/dist/
        retention-days: 7

  # Job para testes do mobile
  test-mobile:
    name: Mobile Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json
        
    - name: Install dependencies
      working-directory: ./mobile
      run: npm ci
      
    - name: Run mobile tests
      working-directory: ./mobile
      run: npm test -- --coverage --watchAll=false
      
    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-test-results
        path: mobile/coverage/

  # Job para build Docker
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [build-backend]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      working-directory: ./backend
      run: |
        docker build -t cyberlens-backend:test .
        
    - name: Test Docker image
      run: |
        docker run --rm cyberlens-backend:test node --version
        docker run --rm cyberlens-backend:test npm --version

  # Job para anÃ¡lise de seguranÃ§a
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run npm audit
      working-directory: ./backend
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=backend/package.json

  # Job de deploy (apenas para branch main)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, test-mobile, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy notification
      run: |
        echo "ðŸš€ Deploying to production..."
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        
    # Aqui vocÃª pode adicionar os passos especÃ­ficos de deploy
    # Por exemplo: deploy para AWS, Heroku, etc.