name: Integration Tests

on:
  schedule:
    # Executa diariamente às 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Permite execução manual
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'mobile/**'
      - 'docker-compose.yml'
      - '.github/workflows/integration-tests.yml'

jobs:
  # Testes de integração completos
  integration-tests:
    name: Full Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: cyberlens_integration
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Generate Prisma Client
      working-directory: ./backend
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cyberlens_integration
        
    - name: Run database migrations
      working-directory: ./backend
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cyberlens_integration
        
    - name: Seed test database
      working-directory: ./backend
      run: npx prisma db seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cyberlens_integration
        
    - name: Build backend
      working-directory: ./backend
      run: npm run build
      
    - name: Start backend server
      working-directory: ./backend
      run: |
        npm run start:prod &
        echo $! > backend.pid
        sleep 10
      env:
        NODE_ENV: test
        PORT: 3000
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cyberlens_integration
        JWT_SECRET: integration-test-jwt-secret
        JWT_EXPIRES_IN: 1h
        JWT_REFRESH_SECRET: integration-test-refresh-secret
        JWT_REFRESH_EXPIRES_IN: 7d
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        
    - name: Wait for backend to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
        
    - name: Run integration tests
      working-directory: ./backend
      run: npm run test:integration
      env:
        NODE_ENV: test
        API_BASE_URL: http://localhost:3000
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cyberlens_integration
        
    - name: Run E2E tests
      working-directory: ./backend
      run: npm run test:e2e
      env:
        NODE_ENV: test
        API_BASE_URL: http://localhost:3000
        
    - name: Stop backend server
      if: always()
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
          rm backend.pid
        fi
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          backend/coverage/
          backend/test-results/
          
    - name: Upload logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: integration-test-logs
        path: |
          backend/logs/
          backend/*.log

  # Testes de performance
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: cyberlens_perf
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Install Artillery for load testing
      run: npm install -g artillery@latest
      
    - name: Setup database
      working-directory: ./backend
      run: |
        npx prisma generate
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cyberlens_perf
        
    - name: Build and start backend
      working-directory: ./backend
      run: |
        npm run build
        npm run start:prod &
        echo $! > backend.pid
        sleep 15
      env:
        NODE_ENV: production
        PORT: 3000
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cyberlens_perf
        JWT_SECRET: perf-test-jwt-secret
        
    - name: Wait for backend
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
        
    - name: Run load tests
      run: |
        artillery quick --count 50 --num 10 http://localhost:3000/health
        
    - name: Run API performance tests
      run: |
        # Criar arquivo de configuração do Artillery
        cat > perf-test.yml << EOF
        config:
          target: 'http://localhost:3000'
          phases:
            - duration: 60
              arrivalRate: 10
              name: "Warm up"
            - duration: 120
              arrivalRate: 20
              name: "Load test"
        scenarios:
          - name: "API Health Check"
            weight: 30
            flow:
              - get:
                  url: "/health"
          - name: "Auth Flow"
            weight: 70
            flow:
              - post:
                  url: "/auth/login"
                  json:
                    email: "test@example.com"
                    password: "password123"
        EOF
        
        artillery run perf-test.yml --output perf-results.json
        
    - name: Generate performance report
      run: |
        artillery report perf-results.json --output perf-report.html
        
    - name: Stop backend
      if: always()
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
          rm backend.pid
        fi
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          perf-results.json
          perf-report.html

  # Testes de segurança avançados
  security-tests:
    name: Advanced Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './backend'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Setup Node.js for security tests
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install security testing tools
      run: |
        npm install -g retire
        npm install -g nsp
        
    - name: Run retire.js scan
      working-directory: ./backend
      run: retire --path . --outputformat json --outputpath retire-results.json
      continue-on-error: true
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          trivy-results.sarif
          backend/retire-results.json